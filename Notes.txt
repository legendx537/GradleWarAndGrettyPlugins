gradle war: -

The "gradle war" command is used to build a Web Archive (WAR) file in Gradle. A WAR file is a packaged format commonly used in Java-based web applications.

When you execute the "gradle war" command, Gradle performs a series of tasks such as compiling source code, processing resources, and packaging them into a single WAR file.
The resulting WAR file can be deployed to a web server or container, allowing the application to be hosted and accessed over the internet.

===========================================================================

If we want to deploy the war on jetty server, we will use: -

The "gradle appRun" command is typically used in Gradle projects that utilize the Gradle plugin called "Gradle Application Plugin."

When you execute the "gradle appRun" command, Gradle performs the following tasks:

Compiles the source code of your application.
Resolves and configures the necessary dependencies.
Bundles the compiled code and dependencies into a runnable format.
Starts a local development server or an embedded server.
Deploys and runs your application on the local server.
In essence, "gradle appRun" sets up a development environment that allows you to run your application locally for testing and development purposes.
This command is particularly useful for web applications or server-side applications that need to be executed in a specific runtime environment.

It's worth noting that the behavior of "gradle appRun" can vary depending on the specific configuration
of your Gradle project, including the application plugin settings and any customizations made to the build.gradle file.

Overall, "gradle appRun" simplifies the process of running and testing your application during development,
providing a convenient way to validate your code locally before deploying it to a production environment.


The "gradle appRun" command, by itself, does not deploy the application on Tomcat or Jetty servers.

In Gradle, the "appRun" task is provided by the Gradle Application Plugin. This task is primarily used to start
a local development server or an embedded server to run your application for testing and development purposes.

To deploy your application on Tomcat or Jetty using Gradle, you would need to configure your build.gradle file
accordingly. You can include additional plugins, such as the "Tomcat plugin" or the "Jetty plugin,"
and configure them to deploy your application to the respective servers.

For example, if you are using the Tomcat plugin, you would typically define the Tomcat version, specify the
deployment settings, and provide the necessary configuration details in your build.gradle file. Once
configured, you can use the appropriate Gradle task, such as "tomcatRun" or "tomcatDeploy," to deploy and run your application on Tomcat.

Similarly, if you are using the Jetty plugin, you would configure the Jetty version, deployment settings,
and other required details in your build.gradle file. Then, you can use the "jettyRun" or "jettyDeploy" task to deploy and run your application on Jetty.

In summary, while the "gradle appRun" command itself does not deploy the application on Tomcat or Jetty,
you can use additional plugins and configuration in your build.gradle file to enable deployment to these servers and utilize specific Gradle tasks for deployment.

**
When you use the Gretty plugin with the following configuration in your build.gradle file:

plugins {
    id 'org.gretty' version '4.0.3'
}
By default, the Gretty plugin deploys your application on an embedded Jetty server.
However, you can specify the use of Tomcat instead by configuring the plugin accordingly.

To deploy your application on Tomcat using the Gretty plugin, you need to add
the following configuration to your build.gradle file:

gretty {
    container = 'tomcat'
}

With this configuration, when you run the "gradle appRun" command, the Gretty plugin will deploy your application on the embedded Tomcat server.

If you don't explicitly specify the container as shown above, the Gretty plugin will default to
using Jetty as the embedded server for deploying your application.

Therefore, based on the presence or absence of the "gretty { container = 'tomcat' }" configuration
in your build.gradle file, you can determine whether your application is deployed on Jetty (default) or Tomcat.

Remember to clean and rebuild your project (gradle clean) after making changes to your build.gradle file to ensure the updated configurations take effect.



** Summary -> Since we have used plugin :-

plugins {
    id 'org.gretty' version '4.0.3'
}

gradle appRun -> will deploy the app on jetty server

gradle tomcatRun -> will deploy the server on tomcat server

another way to run the server on tomcat is that you can configure the gretty container by :-
gretty {
    container = 'tomcat'
}
With this configuration, when you run the "gradle appRun" command, the Gretty plugin will deploy your application on the embedded Tomcat server.

===============================================================================================================================================================

We can also change the port that our gretty plugin is using.
We can do this by changing the httpPort of gretty plugin in the build.gradle
as follows:

gretty.httpPort = 8081 (whichever port is free)

After changing the port , our application will be running on port 8081.
===============================================================================================================================================================

We will be building the test cases using Mockito for the CouponServlet.java: -

So we have added dependencies: -

// https://mvnrepository.com/artifact/org.mockito/mockito-core
testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.3.1'

// https://mvnrepository.com/artifact/junit/junit
testImplementation group: 'junit', name: 'junit', version: '4.4'

===============================================================================================================================================================

Before we have tested the servlet.java methods doPost and doGet.
Now we will be generating the jacoco test Report for the project.

we just have to add the plugin:

id 'jacoco'

It will bring some tasks along with the plugin with the help of which we can generate test report.

we can make jacoco Report available after test cases are run by using finalizedBy
in build.gradle like: -

test.finalizedBy jacocoTestReport -> it will generate jacocoReports in the libs/jacoco

we can refer the html produced by the task to see the test coverage.

if we run the jacocoTestReport without running the test then we will not have any report,
because it needs the test to be run, so that it can generate report.

If we want to run the test every time before running jacocoTestReport,
so that we do not get empty test report, we can add : -

jacocoTestReport.dependsOn test -> this will run test every time before jacocoTestReport is run.

jacocoTestReport will analyze how many lines are covered under the test report.
===============================================================================================================================================================

Now we are Learning how to generate a Install SonarQube: -

SonarQube is generally used for code-analysis , identifying security bugs , more information can be found on chatgpt.

First download Sonar Community Edition(as it is free)
Then unzip the download file.
Keep the folder in some known folder.
Set the environment path to all upto windows path going through the bin path of sonar folder.(So that we can start sonar bat file)

Next step:-
Navigate to the sonar Folder in the cmd
Then Navigate to windows folder inside the bin
Then Run the StartSonar.bat file to launch Sonar Analysis.(It will accessible on localhost:9000 )

Next step: -
add the plugin: -
id 'org.sonarqube' version 'latest-version'

Generate token for the sonarQube by: -
Going to My Account
Then going to the security tab, generate a token.

for this project, we will use token:- squ_2d9a3925cd7a6768119894420eec968155f372bc
squ_2d9a3925cd7a6768119894420eec968155f372bc ( valid for 30 days )

Proper Command: -
gradle sonar -Dsonar.login={token_from_my-account->security}

replacing the token with real token: -
gradle sonar -Dsonar.login=squ_2d9a3925cd7a6768119894420eec968155f372bc

gradle sonarqube -Dsonar.login=squ_2d9a3925cd7a6768119894420eec968155f372bc

=====================================================================================================================================================

Gretty Plugin is not fully supported in gradle 7.0: -

The error you're encountering is due to the Gretty plugin not fully supporting Gradle 7.0 and above. The plugin relies on a method called Project.afterEvaluate() that has changed its behavior in Gradle 7.0, causing the error you're seeing.

To resolve this issue, you have a few options:

Downgrade Gradle: If you don't specifically require Gradle 7.0 or above for your project, you can consider downgrading to a lower version of Gradle (e.g., Gradle 6.x) where the Gretty plugin works without issues. To do this, you need to update the Gradle version specified in your project's gradle/wrapper/gradle-wrapper.properties file.

Check for Gretty updates: Keep an eye on the official Gretty plugin documentation or the project's GitHub repository for updates that address compatibility with Gradle 7.0 and above. Once an updated version is available, you can upgrade the Gretty plugin in your project.

Remove or replace Gretty: If you don't depend heavily on the Gretty plugin and can explore alternatives, you may consider removing or replacing it with another plugin that supports Gradle 7.0 and above. This option depends on your project's requirements and use case.

Remember to backup your project before making any changes and consider testing them in a separate environment to ensure they work as expected.

Please let me know if you need further assistance or have any additional questions.

=====================================================================================================================================================
How to downgrade the gradle version of project from 7.2 to 6.9.2?

To downgrade the Gradle version of your project from 7.2 to 6.9.2, you need to update the Gradle version specified in your project's gradle/wrapper/gradle-wrapper.properties file. Here's how you can do it:

Open the gradle/wrapper/gradle-wrapper.properties file in a text editor.

Look for the following line:

distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
Replace it with the following line:

distributionUrl=https\://services.gradle.org/distributions/gradle-6.9.2-bin.zip
This specifies the URL for the Gradle distribution to be used.

Save the file.

Once you have updated the gradle-wrapper.properties file, Gradle will automatically download the specified Gradle version (6.9.2) the next time you run a Gradle command, such as ./gradlew build.

After downgrading Gradle, you should retest your project to ensure everything works as expected with the older version.

Please let me know if you have any further questions!

=====================================================================================================================================================

what are the replacement for gretty plugin: -

If you need an alternative to the Gretty plugin for running and deploying web applications in Gradle, you can consider using the following plugins:

Spring Boot Plugin: If you are using Spring Boot for your web application, you can leverage the Spring Boot Gradle plugin (org.springframework.boot) instead. It provides tasks for running and packaging Spring Boot applications, and it integrates well with the Spring Boot framework.

To use the Spring Boot plugin, add the following line to your build.gradle file:

plugins {
    id 'org.springframework.boot' version 'x.x.x' // Replace with the desired version
}
Make sure to replace 'x.x.x' with the specific version of the Spring Boot plugin you want to use. You can find the latest version on the Spring Boot documentation or the Gradle plugin portal.

Tomcat Plugin: If you prefer using Apache Tomcat as your web server, you can use the Tomcat plugin (com.bmuschko.tomcat) for Gradle. It allows you to deploy your web application to a local or remote Tomcat server.

To use the Tomcat plugin, add the following lines to your build.gradle file:

plugins {
    id 'com.bmuschko.tomcat' version 'x.x.x' // Replace with the desired version
}

tomcat {
    // Configure Tomcat settings, e.g., server URL, credentials, context path, etc.
}
Again, make sure to replace 'x.x.x' with the specific version of the Tomcat plugin you want to use. You can find the latest version on the Gradle plugin portal.

Both the Spring Boot plugin and the Tomcat plugin provide convenient tasks and configurations to run and deploy web applications. Choose the one that aligns with your project requirements and preferences.

Remember to sync your Gradle project after adding the plugin, and you should be able to utilize the features provided by the chosen plugin.

Let me know if you need further assistance!

=====================================================================================================================================================

for recent version of sonarqube, we need a token for generating the report: -

That we have configured in the buils.gradle.

We have successfully generated the sonarReport by: -

first launching the sonarqube on localhost:9000
and then going to particular project, adding the plugin and adding the corresponding token.

then running: - gradle clean build -> to clean and build the project again
then finaaly run: - gradle sonarqube -> to generate a soner report on the localhost:9000 for our project.

=====================================================================================================================================================
